<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/test/java/api/tests/DDTests.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/api/tests/DDTests.java" />
              <option name="originalContent" value="package api.tests;&#10;&#10;import api.endpoints.UserEndpoints;&#10;import api.payload.User;&#10;import api.utilities.DataProviders;&#10;import io.restassured.response.Response;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.testng.Assert;&#10;import org.testng.annotations.Test;&#10;&#10;@Slf4j&#10;public class DDTests {&#10;&#10;    @Test(priority = 1, dataProvider = &quot;Data&quot;, dataProviderClass = DataProviders.class)&#10;    public void test_createUser(String userId, String userName, String firstName, String lastName, String email, String password, String phone){&#10;&#10;        User userPayload = new User(Integer.parseInt(userId), userName, firstName,lastName,email, password, phone, 1);&#10;&#10;        Response response = UserEndpoints.createUser(userPayload);&#10;&#10;        log.info(response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200);&#10;&#10;    }&#10;&#10;    @Test(priority = 2, dataProvider = &quot;UserNames&quot;, dataProviderClass = DataProviders.class)&#10;    public void test_deleteUser(String userName) {&#10;&#10;        log.debug(&quot;Attempting to delete user: &quot; + userName);&#10;&#10;        // Retry logic for transient backend issues&#10;        int retryCount = 5;&#10;        boolean userExists = false;&#10;&#10;        Response getUserResponse = null;&#10;&#10;        for (int i = 0; i &lt; retryCount; i++) {&#10;            getUserResponse = UserEndpoints.getUser(userName);&#10;            if (getUserResponse.getStatusCode() == 200) {&#10;                userExists = true;&#10;                break;&#10;            }&#10;            log.warn(&quot;Retrying to check user existence: Attempt &quot; + (i + 1));&#10;            try {&#10;                Thread.sleep(1000); // Wait for 1 second before retrying&#10;            } catch (InterruptedException e) {&#10;                Thread.currentThread().interrupt();&#10;            }&#10;        }&#10;&#10;        if (!userExists) {&#10;            log.error(&quot;User does not exist after retries: &quot; + userName);&#10;            Assert.fail(&quot;Cannot delete user as it does not exist: &quot; + userName);&#10;        }&#10;&#10;        // Log the getUser response for debugging&#10;        log.info(&quot;getUser Response: &quot; + getUserResponse.then().extract().asPrettyString());&#10;&#10;        // Proceed to delete the user&#10;        // Log the deleteUser request details&#10;        log.debug(&quot;Sending delete request for user: &quot; + userName);&#10;&#10;        // Retry logic for delete operation&#10;        int deleteRetryCount = 5;&#10;        boolean deleteSuccess = false;&#10;&#10;        for (int i = 0; i &lt; deleteRetryCount; i++) {&#10;            Response deleteResponse = UserEndpoints.deleteUser(userName);&#10;            log.info(&quot;Delete Response: &quot; + deleteResponse.then().extract().asPrettyString());&#10;&#10;            if (deleteResponse.getStatusCode() == 200) {&#10;                deleteSuccess = true;&#10;                break;&#10;            }&#10;&#10;            log.warn(&quot;Retrying delete operation: Attempt &quot; + (i + 1));&#10;            try {&#10;                Thread.sleep(1000); // Wait for 1 second before retrying&#10;            } catch (InterruptedException e) {&#10;                Thread.currentThread().interrupt();&#10;            }&#10;        }&#10;&#10;        if (!deleteSuccess) {&#10;            log.error(&quot;Failed to delete user after retries: &quot; + userName);&#10;            Assert.fail(&quot;Failed to delete user: &quot; + userName);&#10;        }&#10;    }&#10;&#10;&#10;}" />
              <option name="updatedContent" value="package api.tests;&#10;&#10;import api.endpoints.UserEndpoints;&#10;import api.payload.User;&#10;import api.utilities.DataProviders;&#10;import io.restassured.response.Response;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.testng.Assert;&#10;import org.testng.annotations.Test;&#10;&#10;@Slf4j&#10;public class DDTests {&#10;&#10;    @Test(priority = 1, dataProvider = &quot;Data&quot;, dataProviderClass = DataProviders.class)&#10;    public void test_createUser(String userId, String userName, String firstName, String lastName, String email, String password, String phone) {&#10;        log.info(&quot;Starting test: test_createUser&quot;);&#10;        log.info(&quot;Creating user with username: &quot; + userName);&#10;&#10;        User userPayload = new User(Integer.parseInt(userId), userName, firstName, lastName, email, password, phone, 1);&#10;        Response response = UserEndpoints.createUser(userPayload);&#10;&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User creation failed&quot;);&#10;        log.info(&quot;User created successfully: &quot; + userName);&#10;    }&#10;&#10;    @Test(priority = 2, dataProvider = &quot;UserNames&quot;, dataProviderClass = DataProviders.class)&#10;    public void test_deleteUser(String userName) {&#10;        log.info(&quot;Starting test: test_deleteUser&quot;);&#10;        log.info(&quot;Attempting to delete user: &quot; + userName);&#10;&#10;        // Retry logic for transient backend issues&#10;        int retryCount = 5;&#10;        boolean userExists = false;&#10;        Response getUserResponse = null;&#10;&#10;        for (int i = 0; i &lt; retryCount; i++) {&#10;            getUserResponse = UserEndpoints.getUser(userName);&#10;            if (getUserResponse.getStatusCode() == 200) {&#10;                userExists = true;&#10;                break;&#10;            }&#10;            log.warn(&quot;Retrying to check user existence: Attempt &quot; + (i + 1));&#10;            try {&#10;                Thread.sleep(1000); // Wait for 1 second before retrying&#10;            } catch (InterruptedException e) {&#10;                Thread.currentThread().interrupt();&#10;            }&#10;        }&#10;&#10;        if (!userExists) {&#10;            log.error(&quot;User does not exist after retries: &quot; + userName);&#10;            Assert.fail(&quot;Cannot delete user as it does not exist: &quot; + userName);&#10;        }&#10;&#10;        log.info(&quot;getUser Response: &quot; + getUserResponse.then().extract().asPrettyString());&#10;&#10;        // Proceed to delete the user&#10;        log.info(&quot;Sending delete request for user: &quot; + userName);&#10;        int deleteRetryCount = 5;&#10;        boolean deleteSuccess = false;&#10;&#10;        for (int i = 0; i &lt; deleteRetryCount; i++) {&#10;            Response deleteResponse = UserEndpoints.deleteUser(userName);&#10;            log.info(&quot;Delete Response: &quot; + deleteResponse.then().extract().asPrettyString());&#10;&#10;            if (deleteResponse.getStatusCode() == 200) {&#10;                deleteSuccess = true;&#10;                break;&#10;            }&#10;&#10;            log.warn(&quot;Retrying delete operation: Attempt &quot; + (i + 1));&#10;            try {&#10;                Thread.sleep(1000); // Wait for 1 second before retrying&#10;            } catch (InterruptedException e) {&#10;                Thread.currentThread().interrupt();&#10;            }&#10;        }&#10;&#10;        if (!deleteSuccess) {&#10;            log.error(&quot;Failed to delete user after retries: &quot; + userName);&#10;            Assert.fail(&quot;Failed to delete user: &quot; + userName);&#10;        }&#10;&#10;        log.info(&quot;User deleted successfully: &quot; + userName);&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/api/tests/UserTests.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/api/tests/UserTests.java" />
              <option name="originalContent" value="package api.tests;&#10;&#10;import api.endpoints.UserEndpoints;&#10;import api.endpoints.UserEndpointsPropertiesFile;&#10;import api.payload.User;&#10;import io.restassured.http.ContentType;&#10;import io.restassured.response.Response;&#10;&#10;import api.payload.User;&#10;import com.github.javafaker.Faker;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.testng.Assert;&#10;import org.testng.Reporter;&#10;import org.testng.annotations.BeforeClass;&#10;import org.testng.annotations.Test;&#10;&#10;@Slf4j&#10;public class UserTests {&#10;&#10;    Faker faker;&#10;    User userPayload;&#10;&#10;    @BeforeClass&#10;    public void setup(){&#10;&#10;        faker = new Faker();&#10;        userPayload = new User();&#10;&#10;        /*&#10;        userPayload.setId(faker.idNumber().hashCode());&#10;        userPayload.setFirstName(faker.name().firstName());&#10;        userPayload.setLastName(faker.name().lastName());&#10;        userPayload.setUsername(faker.name().username());&#10;        userPayload.setPassword(faker.internet().password(5, 10));&#10;        userPayload.setEmail(faker.internet().safeEmailAddress());&#10;        userPayload.setPhone(faker.phoneNumber().phoneNumber());&#10;        */&#10;&#10;        userPayload.setId(12345);&#10;        userPayload.setFirstName(&quot;John&quot;);&#10;        userPayload.setLastName(&quot;Doe&quot;);&#10;        userPayload.setUsername(&quot;apitestuser123&quot;);&#10;        userPayload.setPassword(&quot;Test@123&quot;);&#10;        userPayload.setEmail(&quot;john.doe@example.com&quot;);&#10;        userPayload.setPhone(&quot;1234567890&quot;);&#10;        userPayload.setUserStatus(1); // Set a default userStatus&#10;&#10;        log.info(&quot;Setup completed for UserTests&quot;);&#10;    }&#10;&#10;    @Test(priority = 1)&#10;    public void test_createUser(){&#10;        log.info(&quot;Starting test: test_createUser&quot;);&#10;        log.info(&quot;Creating user with username: &quot; + userPayload.getUsername());&#10;&#10;        Response response = UserEndpoints.createUser(userPayload);&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User creation failed&quot;);&#10;        log.info(&quot;User created successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;    @Test(priority = 2)&#10;    public void test_getUserByName() {&#10;        log.info(&quot;Starting test: test_getUserByName&quot;);&#10;        log.info(&quot;Fetching user with username: &quot; + userPayload.getUsername());&#10;&#10;        Response response = UserEndpoints.getUser(this.userPayload.getUsername());&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;Failed to fetch user&quot;);&#10;        log.info(&quot;User fetched successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;    @Test(priority = 3)&#10;    public void test_modifyUser(){&#10;        log.info(&quot;Starting test: test_modifyUser&quot;);&#10;        log.info(&quot;Modifying user with username: &quot; + userPayload.getUsername());&#10;&#10;        userPayload.setFirstName(faker.gameOfThrones().character());&#10;        userPayload.setLastName(faker.name().lastName());&#10;        userPayload.setEmail(faker.internet().safeEmailAddress());&#10;&#10;        Response response = UserEndpoints.updateUser(userPayload.getUsername(), userPayload);&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User modification failed&quot;);&#10;        log.info(&quot;User modified successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;    @Test(priority = 4)&#10;    public void test_deleteUserByName(){&#10;        log.info(&quot;Starting test: test_deleteUserByName&quot;);&#10;        log.info(&quot;Deleting user with username: &quot; + userPayload.getUsername());&#10;&#10;        Response response = UserEndpoints.deleteUser(this.userPayload.getUsername());&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User deletion failed&quot;);&#10;        log.info(&quot;User deleted successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;    @Test(priority = 5)&#10;    public void test_createUser_propertiesFile(){&#10;        log.info(&quot;Starting test: test_createUser&quot;);&#10;        log.info(&quot;Creating user with username: &quot; + userPayload.getUsername());&#10;&#10;        Response response = UserEndpointsPropertiesFile.createUser(userPayload);&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User creation failed&quot;);&#10;        log.info(&quot;User created successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;    @Test(priority = 6)&#10;    public void test_getUserByName_propertiesFile() {&#10;        log.info(&quot;Starting test: test_getUserByName&quot;);&#10;        log.info(&quot;Fetching user with username: &quot; + userPayload.getUsername());&#10;&#10;        Response response = UserEndpointsPropertiesFile.getUser(this.userPayload.getUsername());&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;Failed to fetch user&quot;);&#10;        log.info(&quot;User fetched successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;&#10;    @Test(priority = 7)&#10;    public void test_modifyUser_propertiesFile(){&#10;        log.info(&quot;Starting test: test_modifyUser&quot;);&#10;        log.info(&quot;Modifying user with username: &quot; + userPayload.getUsername());&#10;&#10;        userPayload.setFirstName(faker.gameOfThrones().character());&#10;        userPayload.setLastName(faker.name().lastName());&#10;        userPayload.setEmail(faker.internet().safeEmailAddress());&#10;&#10;        Response response = UserEndpointsPropertiesFile.updateUser(userPayload.getUsername(), userPayload);&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User modification failed&quot;);&#10;        log.info(&quot;User modified successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;    @Test(priority = 8)&#10;    public void test_deleteUserByName_propertiesFile(){&#10;        log.info(&quot;Starting test: test_deleteUserByName&quot;);&#10;        log.info(&quot;Deleting user with username: &quot; + userPayload.getUsername());&#10;&#10;        Response response = UserEndpointsPropertiesFile.deleteUser(this.userPayload.getUsername());&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User deletion failed&quot;);&#10;        log.info(&quot;User deleted successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package api.tests;&#10;&#10;import api.endpoints.UserEndpoints;&#10;import api.endpoints.UserEndpointsPropertiesFile;&#10;import api.payload.User;&#10;import io.restassured.http.ContentType;&#10;import io.restassured.response.Response;&#10;&#10;import api.payload.User;&#10;import com.github.javafaker.Faker;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.testng.Assert;&#10;import org.testng.Reporter;&#10;import org.testng.annotations.BeforeClass;&#10;import org.testng.annotations.Test;&#10;&#10;@Slf4j&#10;public class UserTests {&#10;&#10;    Faker faker;&#10;    User userPayload;&#10;&#10;    @BeforeClass&#10;    public void setup(){&#10;&#10;        faker = new Faker();&#10;        userPayload = new User();&#10;&#10;        /*&#10;        userPayload.setId(faker.idNumber().hashCode());&#10;        userPayload.setFirstName(faker.name().firstName());&#10;        userPayload.setLastName(faker.name().lastName());&#10;        userPayload.setUsername(faker.name().username());&#10;        userPayload.setPassword(faker.internet().password(5, 10));&#10;        userPayload.setEmail(faker.internet().safeEmailAddress());&#10;        userPayload.setPhone(faker.phoneNumber().phoneNumber());&#10;        */&#10;&#10;        userPayload.setId(12345);&#10;        userPayload.setFirstName(&quot;John&quot;);&#10;        userPayload.setLastName(&quot;Doe&quot;);&#10;        userPayload.setUsername(&quot;apitestuser123&quot;);&#10;        userPayload.setPassword(&quot;Test@123&quot;);&#10;        userPayload.setEmail(&quot;john.doe@example.com&quot;);&#10;        userPayload.setPhone(&quot;1234567890&quot;);&#10;        userPayload.setUserStatus(1); // Set a default userStatus&#10;&#10;        log.info(&quot;Setup completed for UserTests&quot;);&#10;    }&#10;&#10;    @Test(priority = 1)&#10;    public void test_createUser(){&#10;        log.info(&quot;Starting test: test_createUser&quot;);&#10;        log.info(&quot;Creating user with username: &quot; + userPayload.getUsername());&#10;&#10;        Response response = UserEndpoints.createUser(userPayload);&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User creation failed&quot;);&#10;        log.info(&quot;User created successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;    @Test(priority = 2, retryAnalyzer = RetryAnalyzer.class)&#10;    public void test_getUserByName() {&#10;        log.info(&quot;Starting test: test_getUserByName&quot;);&#10;        log.info(&quot;Fetching user with username: &quot; + userPayload.getUsername());&#10;&#10;        Response response = UserEndpoints.getUser(this.userPayload.getUsername());&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;Failed to fetch user&quot;);&#10;        log.info(&quot;User fetched successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;    @Test(priority = 3)&#10;    public void test_modifyUser(){&#10;        log.info(&quot;Starting test: test_modifyUser&quot;);&#10;        log.info(&quot;Modifying user with username: &quot; + userPayload.getUsername());&#10;&#10;        userPayload.setFirstName(faker.gameOfThrones().character());&#10;        userPayload.setLastName(faker.name().lastName());&#10;        userPayload.setEmail(faker.internet().safeEmailAddress());&#10;&#10;        Response response = UserEndpoints.updateUser(userPayload.getUsername(), userPayload);&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User modification failed&quot;);&#10;        log.info(&quot;User modified successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;    @Test(priority = 4, retryAnalyzer = RetryAnalyzer.class)&#10;    public void test_deleteUserByName(){&#10;        log.info(&quot;Starting test: test_deleteUserByName&quot;);&#10;        log.info(&quot;Deleting user with username: &quot; + userPayload.getUsername());&#10;&#10;        Response response = UserEndpoints.deleteUser(this.userPayload.getUsername());&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User deletion failed&quot;);&#10;        log.info(&quot;User deleted successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;    @Test(priority = 5)&#10;    public void test_createUser_propertiesFile(){&#10;        log.info(&quot;Starting test: test_createUser&quot;);&#10;        log.info(&quot;Creating user with username: &quot; + userPayload.getUsername());&#10;&#10;        Response response = UserEndpointsPropertiesFile.createUser(userPayload);&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User creation failed&quot;);&#10;        log.info(&quot;User created successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;    @Test(priority = 6)&#10;    public void test_getUserByName_propertiesFile() {&#10;        log.info(&quot;Starting test: test_getUserByName&quot;);&#10;        log.info(&quot;Fetching user with username: &quot; + userPayload.getUsername());&#10;&#10;        Response response = UserEndpointsPropertiesFile.getUser(this.userPayload.getUsername());&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;Failed to fetch user&quot;);&#10;        log.info(&quot;User fetched successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;&#10;    @Test(priority = 7)&#10;    public void test_modifyUser_propertiesFile(){&#10;        log.info(&quot;Starting test: test_modifyUser&quot;);&#10;        log.info(&quot;Modifying user with username: &quot; + userPayload.getUsername());&#10;&#10;        userPayload.setFirstName(faker.gameOfThrones().character());&#10;        userPayload.setLastName(faker.name().lastName());&#10;        userPayload.setEmail(faker.internet().safeEmailAddress());&#10;&#10;        Response response = UserEndpointsPropertiesFile.updateUser(userPayload.getUsername(), userPayload);&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User modification failed&quot;);&#10;        log.info(&quot;User modified successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;    @Test(priority = 8)&#10;    public void test_deleteUserByName_propertiesFile(){&#10;        log.info(&quot;Starting test: test_deleteUserByName&quot;);&#10;        log.info(&quot;Deleting user with username: &quot; + userPayload.getUsername());&#10;&#10;        Response response = UserEndpointsPropertiesFile.deleteUser(this.userPayload.getUsername());&#10;        log.debug(&quot;Response: &quot; + response.then().extract().asPrettyString());&#10;&#10;        Assert.assertEquals(response.getStatusCode(), 200, &quot;User deletion failed&quot;);&#10;        log.info(&quot;User deleted successfully: &quot; + userPayload.getUsername());&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/api/utilities/RetryAnalyzer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/api/utilities/RetryAnalyzer.java" />
              <option name="updatedContent" value="package api.utilities;&#10;&#10;import org.testng.IRetryAnalyzer;&#10;import org.testng.ITestResult;&#10;&#10;public class RetryAnalyzer implements IRetryAnalyzer {&#10;&#10;    private int retryCount = 0;&#10;    private static final int maxRetryCount = 5;&#10;&#10;    @Override&#10;    public boolean retry(ITestResult result) {&#10;        if (retryCount &lt; maxRetryCount) {&#10;            retryCount++;&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/api/utilities/XLUtility.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/api/utilities/XLUtility.java" />
              <option name="originalContent" value="package api.utilities;&#10;&#10;import java.io.File; // Added from observation of setCellData method&#10;import java.io.FileInputStream;&#10;import java.io.FileOutputStream;&#10;import java.io.IOException;&#10;&#10;import org.apache.poi.ss.usermodel.CellStyle;&#10;import org.apache.poi.ss.usermodel.DataFormatter; // Added from observation of getCellData method&#10;import org.apache.poi.ss.usermodel.FillPatternType; // Added from observation of fillColor methods&#10;import org.apache.poi.ss.usermodel.IndexedColors; // Added from observation of fillColor methods&#10;import org.apache.poi.xssf.usermodel.XSSFCell;&#10;import org.apache.poi.xssf.usermodel.XSSFRow;&#10;import org.apache.poi.xssf.usermodel.XSSFSheet;&#10;import org.apache.poi.xssf.usermodel.XSSFWorkbook;&#10;&#10;public class XLUtility {&#10;&#10;    public FileInputStream fi;&#10;    public FileOutputStream fo;&#10;    public XSSFWorkbook workbook;&#10;    public XSSFSheet sheet;&#10;    public XSSFRow row;&#10;    public XSSFCell cell;&#10;    public String path;&#10;&#10;    public XLUtility(String path) {&#10;        this.path = path;&#10;    }&#10;&#10;    public int getRowCount(String sheetName) throws IOException {&#10;        fi = new FileInputStream(path);&#10;        workbook = new XSSFWorkbook(fi);&#10;        sheet = workbook.getSheet(sheetName);&#10;        int rowcount = sheet.getLastRowNum();&#10;        workbook.close();&#10;        fi.close();&#10;        return rowcount;&#10;    }&#10;&#10;    public int getCellCount(String sheetName, int rownum) throws IOException {&#10;        fi = new FileInputStream(path);&#10;        workbook = new XSSFWorkbook(fi);&#10;        sheet = workbook.getSheet(sheetName);&#10;        row = sheet.getRow(rownum);&#10;        int cellcount = row.getLastCellNum();&#10;        workbook.close();&#10;        fi.close();&#10;        return cellcount;&#10;    }&#10;&#10;    public String getCellData(String sheetName, int rownum, int colnum) throws IOException {&#10;        fi = new FileInputStream(path);&#10;        workbook = new XSSFWorkbook(fi);&#10;        sheet = workbook.getSheet(sheetName);&#10;        row = sheet.getRow(rownum);&#10;        cell = row.getCell(colnum);&#10;&#10;        DataFormatter formatter = new DataFormatter();&#10;        String data;&#10;        try {&#10;            data = formatter.formatCellValue(cell); // Returns the formatted value of a cell as a String regardless of the cell type.&#10;        } catch (Exception e) {&#10;            data = &quot;&quot;;&#10;        }&#10;        workbook.close();&#10;        fi.close();&#10;        return data;&#10;    }&#10;&#10;    public void setCellData(String sheetName, int rownum, int colnum, String data) throws IOException {&#10;        File xlfile = new File(path);&#10;        if (!xlfile.exists()) { // If file not exists then create new file&#10;            workbook = new XSSFWorkbook();&#10;            fo = new FileOutputStream(path);&#10;            workbook.write(fo);&#10;        }&#10;&#10;        fi = new FileInputStream(path);&#10;        workbook = new XSSFWorkbook(fi);&#10;&#10;        if (workbook.getSheetIndex(sheetName) == -1) { // If sheet not exists then create new Sheet&#10;            workbook.createSheet(sheetName);&#10;        }&#10;        sheet = workbook.getSheet(sheetName);&#10;&#10;        if (sheet.getRow(rownum) == null) { // If row not exists then create new Row&#10;            row = sheet.createRow(rownum);&#10;        }&#10;        cell = row.createCell(colnum); // Assign the created cell to 'cell'&#10;        cell.setCellValue(data); // Set the value to the cell&#10;&#10;        fo = new FileOutputStream(path);&#10;        workbook.write(fo);&#10;        workbook.close();&#10;        fi.close();&#10;        fo.close();&#10;    }&#10;&#10;    public void fillGreenColor(String sheetName, int rownum, int colnum) throws IOException {&#10;        fi = new FileInputStream(path);&#10;        workbook = new XSSFWorkbook(fi);&#10;        sheet = workbook.getSheet(sheetName);&#10;        row = sheet.getRow(rownum);&#10;        cell = row.getCell(colnum);&#10;&#10;        CellStyle style = workbook.createCellStyle();&#10;        style.setFillForegroundColor(IndexedColors.GREEN.getIndex());&#10;        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);&#10;&#10;        cell.setCellStyle(style);&#10;        fo = new FileOutputStream(path); // Initialize fo before writing&#10;        workbook.write(fo);&#10;        workbook.close();&#10;        fi.close();&#10;        fo.close();&#10;    }&#10;&#10;    public void fillRedColor(String sheetName, int rownum, int colnum) throws IOException {&#10;        fi = new FileInputStream(path);&#10;        workbook = new XSSFWorkbook(fi);&#10;        sheet = workbook.getSheet(sheetName);&#10;        row = sheet.getRow(rownum);&#10;        cell = row.getCell(colnum);&#10;&#10;        CellStyle style = workbook.createCellStyle();&#10;        style.setFillForegroundColor(IndexedColors.RED.getIndex());&#10;        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);&#10;&#10;        cell.setCellStyle(style);&#10;        fo = new FileOutputStream(path); // Initialize fo before writing&#10;        workbook.write(fo);&#10;        workbook.close();&#10;        fi.close();&#10;        fo.close();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package api.utilities;&#10;&#10;import java.io.File; // Added from observation of setCellData method&#10;import java.io.FileInputStream;&#10;import java.io.FileOutputStream;&#10;import java.io.IOException;&#10;&#10;import org.apache.poi.ss.usermodel.CellStyle;&#10;import org.apache.poi.ss.usermodel.DataFormatter; // Added from observation of getCellData method&#10;import org.apache.poi.ss.usermodel.FillPatternType; // Added from observation of fillColor methods&#10;import org.apache.poi.ss.usermodel.IndexedColors; // Added from observation of fillColor methods&#10;import org.apache.poi.xssf.usermodel.XSSFCell;&#10;import org.apache.poi.xssf.usermodel.XSSFRow;&#10;import org.apache.poi.xssf.usermodel.XSSFSheet;&#10;import org.apache.poi.xssf.usermodel.XSSFWorkbook;&#10;&#10;public class XLUtility {&#10;&#10;    public FileInputStream fi;&#10;    public FileOutputStream fo;&#10;    public XSSFWorkbook workbook;&#10;    public XSSFSheet sheet;&#10;    public XSSFRow row;&#10;    public XSSFCell cell;&#10;    public String path;&#10;&#10;    public XLUtility(String path) {&#10;        this.path = path;&#10;    }&#10;&#10;    public int getRowCount(String sheetName) throws IOException {&#10;        fi = new FileInputStream(path);&#10;        workbook = new XSSFWorkbook(fi);&#10;        sheet = workbook.getSheet(sheetName);&#10;&#10;        if (sheet == null) {&#10;            workbook.close();&#10;            fi.close();&#10;            throw new IOException(&quot;Sheet '&quot; + sheetName + &quot;' does not exist in the workbook.&quot;);&#10;        }&#10;&#10;        int rowcount = sheet.getLastRowNum();&#10;        workbook.close();&#10;        fi.close();&#10;        return rowcount;&#10;    }&#10;&#10;    public int getCellCount(String sheetName, int rownum) throws IOException {&#10;        fi = new FileInputStream(path);&#10;        workbook = new XSSFWorkbook(fi);&#10;        sheet = workbook.getSheet(sheetName);&#10;        row = sheet.getRow(rownum);&#10;        int cellcount = row.getLastCellNum();&#10;        workbook.close();&#10;        fi.close();&#10;        return cellcount;&#10;    }&#10;&#10;    public String getCellData(String sheetName, int rownum, int colnum) throws IOException {&#10;        fi = new FileInputStream(path);&#10;        workbook = new XSSFWorkbook(fi);&#10;        sheet = workbook.getSheet(sheetName);&#10;        row = sheet.getRow(rownum);&#10;        cell = row.getCell(colnum);&#10;&#10;        DataFormatter formatter = new DataFormatter();&#10;        String data;&#10;        try {&#10;            data = formatter.formatCellValue(cell); // Returns the formatted value of a cell as a String regardless of the cell type.&#10;        } catch (Exception e) {&#10;            data = &quot;&quot;;&#10;        }&#10;        workbook.close();&#10;        fi.close();&#10;        return data;&#10;    }&#10;&#10;    public void setCellData(String sheetName, int rownum, int colnum, String data) throws IOException {&#10;        File xlfile = new File(path);&#10;        if (!xlfile.exists()) { // If file not exists then create new file&#10;            workbook = new XSSFWorkbook();&#10;            fo = new FileOutputStream(path);&#10;            workbook.write(fo);&#10;        }&#10;&#10;        fi = new FileInputStream(path);&#10;        workbook = new XSSFWorkbook(fi);&#10;&#10;        if (workbook.getSheetIndex(sheetName) == -1) { // If sheet not exists then create new Sheet&#10;            workbook.createSheet(sheetName);&#10;        }&#10;        sheet = workbook.getSheet(sheetName);&#10;&#10;        if (sheet.getRow(rownum) == null) { // If row not exists then create new Row&#10;            row = sheet.createRow(rownum);&#10;        }&#10;        cell = row.createCell(colnum); // Assign the created cell to 'cell'&#10;        cell.setCellValue(data); // Set the value to the cell&#10;&#10;        fo = new FileOutputStream(path);&#10;        workbook.write(fo);&#10;        workbook.close();&#10;        fi.close();&#10;        fo.close();&#10;    }&#10;&#10;    public void fillGreenColor(String sheetName, int rownum, int colnum) throws IOException {&#10;        fi = new FileInputStream(path);&#10;        workbook = new XSSFWorkbook(fi);&#10;        sheet = workbook.getSheet(sheetName);&#10;        row = sheet.getRow(rownum);&#10;        cell = row.getCell(colnum);&#10;&#10;        CellStyle style = workbook.createCellStyle();&#10;        style.setFillForegroundColor(IndexedColors.GREEN.getIndex());&#10;        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);&#10;&#10;        cell.setCellStyle(style);&#10;        fo = new FileOutputStream(path); // Initialize fo before writing&#10;        workbook.write(fo);&#10;        workbook.close();&#10;        fi.close();&#10;        fo.close();&#10;    }&#10;&#10;    public void fillRedColor(String sheetName, int rownum, int colnum) throws IOException {&#10;        fi = new FileInputStream(path);&#10;        workbook = new XSSFWorkbook(fi);&#10;        sheet = workbook.getSheet(sheetName);&#10;        row = sheet.getRow(rownum);&#10;        cell = row.getCell(colnum);&#10;&#10;        CellStyle style = workbook.createCellStyle();&#10;        style.setFillForegroundColor(IndexedColors.RED.getIndex());&#10;        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);&#10;&#10;        cell.setCellStyle(style);&#10;        fo = new FileOutputStream(path); // Initialize fo before writing&#10;        workbook.write(fo);&#10;        workbook.close();&#10;        fi.close();&#10;        fo.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/resources/log4j2.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/resources/log4j2.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;Configuration status=&quot;WARN&quot;&gt;&#10;&#10;    &lt;Properties&gt;&#10;        &lt;Property name=&quot;basePath&quot;&gt;./logs&lt;/Property&gt;&#10;    &lt;/Properties&gt;&#10;&#10;    &lt;Appenders&gt;&#10;        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;&#10;            &lt;PatternLayout pattern=&quot;%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot; /&gt;&#10;        &lt;/Console&gt;&#10;&#10;        &lt;RollingFile name=&quot;File&quot; fileName=&quot;${basePath}/automation.log&quot;&#10;                     filePattern=&quot;${basePath}/automation-%d{yyyy-MM-dd_HH-mm-ss}.log&quot;&gt;&#10;            &lt;PatternLayout pattern=&quot;%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot; /&gt;&#10;            &lt;TimeBasedTriggeringPolicy /&gt; &lt;!-- Ensures a new file is created for every run --&gt;&#10;        &lt;/RollingFile&gt;&#10;    &lt;/Appenders&gt;&#10;&#10;    &lt;Loggers&gt;&#10;        &lt;Root level=&quot;debug&quot;&gt; &lt;!-- Here you can use multiple log levels: All, Trace, Debug, Info, Warn, Error, Fatal --&gt;&#10;            &lt;AppenderRef ref=&quot;Console&quot; /&gt;&#10;            &lt;AppenderRef ref=&quot;File&quot; /&gt;&#10;        &lt;/Root&gt;&#10;        &lt;!-- Example of a specific logger for a package with a different level --&gt;&#10;        &lt;!-- This logger will specifically control logging for classes within the 'api.endpoints' package. --&gt;&#10;        &lt;!-- 'additivity=&quot;false&quot;' ensures that logs from this logger are not also sent to parent loggers (like Root). --&gt;&#10;        &lt;Logger name=&quot;api.endpoints&quot; level=&quot;info&quot; additivity=&quot;false&quot;&gt;&#10;            &lt;AppenderRef ref=&quot;Console&quot; /&gt;&#10;            &lt;AppenderRef ref=&quot;File&quot; /&gt;&#10;        &lt;/Logger&gt;&#10;    &lt;/Loggers&gt;&#10;&#10;&lt;/Configuration&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;Configuration status=&quot;WARN&quot;&gt;&#10;&#10;    &lt;Properties&gt;&#10;        &lt;Property name=&quot;basePath&quot;&gt;./logs&lt;/Property&gt;&#10;    &lt;/Properties&gt;&#10;&#10;    &lt;Appenders&gt;&#10;        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;&#10;            &lt;PatternLayout pattern=&quot;%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot; /&gt;&#10;        &lt;/Console&gt;&#10;&#10;        &lt;!-- Continuous appending to automation.log without size restriction --&gt;&#10;        &lt;File name=&quot;ContinuousFile&quot; fileName=&quot;${basePath}/automation.log&quot; append=&quot;true&quot;&gt;&#10;            &lt;PatternLayout pattern=&quot;%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot; /&gt;&#10;        &lt;/File&gt;&#10;&#10;        &lt;!-- Separate timestamped log file for each run --&gt;&#10;        &lt;File name=&quot;TimestampedFile&quot; fileName=&quot;${basePath}/automation-${date:yyyy-MM-dd_HH-mm-ss}.log&quot;&gt;&#10;            &lt;PatternLayout pattern=&quot;%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot; /&gt;&#10;        &lt;/File&gt;&#10;    &lt;/Appenders&gt;&#10;&#10;    &lt;Loggers&gt;&#10;        &lt;Root level=&quot;debug&quot;&gt;&#10;            &lt;AppenderRef ref=&quot;Console&quot; /&gt;&#10;            &lt;AppenderRef ref=&quot;ContinuousFile&quot; /&gt;&#10;            &lt;AppenderRef ref=&quot;TimestampedFile&quot; /&gt;&#10;        &lt;/Root&gt;&#10;        &lt;!-- Example of a specific logger for a package with a different level --&gt;&#10;        &lt;!-- This logger will specifically control logging for classes within the 'api.endpoints' package. --&gt;&#10;        &lt;!-- 'additivity=&quot;false&quot;' ensures that logs from this logger are not also sent to parent loggers (like Root). --&gt;&#10;        &lt;Logger name=&quot;api.endpoints&quot; level=&quot;info&quot; additivity=&quot;false&quot;&gt;&#10;            &lt;AppenderRef ref=&quot;Console&quot; /&gt;&#10;            &lt;AppenderRef ref=&quot;ContinuousFile&quot; /&gt;&#10;            &lt;AppenderRef ref=&quot;TimestampedFile&quot; /&gt;&#10;        &lt;/Logger&gt;&#10;    &lt;/Loggers&gt;&#10;&#10;&lt;/Configuration&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>